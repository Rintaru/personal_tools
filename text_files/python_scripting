------------------------------------
*****DICTIONARY*********************
------------------------------------
dictionary = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict["brand"])
------------------------------------
*****LIST***************************
------------------------------------ 
mylist = ["e1", "e2", "e3"]
list1 = ["abc", 34, True, 40, "male"]

------------------------------------
*****TOUPLES************************
------------------------------------
tuple = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')
------------------------------------
*****DICTIONARIES*******************
------------------------------------
COLOR = {
    'black': 0x000000,
    'red': 0xFF0000,
    'blue': 0x0000FF,
    'green': 0x00FF00
}


COLOR['black']

------------------------------------
*****UNITTEST***********************
------------------------------------
#!/usr/bin/python
import unittest
from pkg.python_file import ClassName

class ClassNameTester(unittest.TestCase):
    def test_init(self):
        self.assertTrue( )

------------------------------------
*****TRY-EXCEPT*********************
------------------------------------
try:
  pass
except <errorname>:
  pass
except <errornam2>:
  pass
except:
  pass
------------------------------------
*****@staticmethod******************
------------------------------------
In general, static methods know nothing about the class state. 
They are utility-type methods that take some parameters and work upon those 

------------------------------------
*****@classmethod******************   
------------------------------------
They have the access to the state of the class as it takes a class parameter that points to the class and not the object instance.
It can modify a class state that would apply across all the instances of the class. 

------------------------------------
*****TERNARY************************
------------------------------------
value_if_true if condition else value_if_false				Standard ternary

(if_test_false, if_test_true)[test]					Touple ternary

variable or fallback							returns fallback if variable is false
